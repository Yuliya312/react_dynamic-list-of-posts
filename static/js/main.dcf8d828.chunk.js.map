{"version":3,"sources":["utils/api.ts","constants/urls.ts","components/Comment/Comment.tsx","components/CommentList/CommentList.tsx","components/User/User.tsx","components/Post/Post.tsx","components/PostList/PostList.tsx","App.tsx","index.tsx"],"names":["getData","url","a","fetch","response","json","getUsers","getPosts","getComments","Comment","comment","name","body","email","CommentList","comments","className","map","key","id","User","user","address","city","Post","post","title","length","PostList","posts","App","useState","preparedPosts","setPreparedPosts","isLoading","setIsLoading","query","setQuery","filteredPosts","useMemo","filter","trim","toLowerCase","includes","htmlFor","type","placeholder","value","onChange","event","target","onChangeHandler","onClick","Promise","all","then","usersFromApi","postsFromApi","commentsFromApi","find","userId","postId","finally","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dcf8d828.chunk.js","sourcesContent":["import { POSTS_URL, USERS_URL, COMMENTS_URL } from '../constants/urls';\n\nexport async function getData <T>(url: string): Promise<T> {\n  const response = await fetch(url);\n\n  return response.json();\n}\n\nexport const getUsers = async (): Promise<User[]> => {\n  return getData<User[]>(USERS_URL);\n};\n\nexport const getPosts = async (): Promise<Post[]> => {\n  return getData<Post[]>(POSTS_URL);\n};\n\nexport const getComments = async (): Promise<Comment[]> => {\n  return getData<Comment[]>(COMMENTS_URL);\n};\n","export const POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';\nexport const USERS_URL = 'https://jsonplaceholder.typicode.com/users';\nexport const COMMENTS_URL = 'https://jsonplaceholder.typicode.com/comments';\n","import React, { FC } from 'react';\n\nimport './Comment.css';\n\ninterface Props{\n  comment: Comment;\n}\n\nexport const Comment: FC<Props> = ({ comment }) => {\n  const { name, body, email } = comment;\n\n  return (\n    <>\n      <h3>{name}</h3>\n      <p>{body}</p>\n      <p>{email}</p>\n    </>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { Comment } from '../Comment/Comment';\n\ninterface Props{\n  comments: Comments;\n}\n\nexport const CommentList: FC<Props> = ({ comments }) => (\n  <ul className=\"CommentList\">\n    {comments.map(comment => (\n      <li key={comment.id} className=\"comment\">\n        <Comment comment={comment} />\n      </li>\n    ))}\n  </ul>\n);\n","import React, { FC } from 'react';\n\nimport './User.css';\n\ninterface Props {\n  user: User;\n}\n\nexport const User: FC<Props> = ({ user }) => {\n  const { name, email, address } = user;\n\n  return (\n    <div className=\"user\">\n      <>\n        <p>{name}</p>\n        <p>{email}</p>\n        <p>{address.city}</p>\n      </>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\n\nimport './Post.css';\n\nimport { CommentList } from '../CommentList/CommentList';\nimport { User } from '../User/User';\n\ninterface Props{\n  post: PreparedPost;\n}\n\nexport const Post: FC<Props> = ({ post }) => {\n  const {\n    title,\n    body,\n    user,\n    comments,\n  } = post;\n\n  return (\n    <>\n      <h2 className=\"post__title\">{title}</h2>\n      <p className=\"post__body\">{body}</p>\n      <User user={user} />\n      {`Comments: ${post.comments.length}`}\n      <CommentList comments={comments} />\n    </>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { Post } from '../Post/Post';\nimport './PostList.css';\n\ninterface Props{\n  posts: PreparedPost[];\n}\n\nexport const PostList: FC<Props> = ({ posts }) => (\n  <div className=\"postlist\">\n    {posts.map(post => (\n      <div className=\"post\" key={post.id}>\n        <Post post={post} />\n      </div>\n    ))}\n  </div>\n);\n","import React, {\n  FC, useState, ChangeEvent, useMemo,\n} from 'react';\nimport './App.css';\n\nimport { getUsers, getPosts, getComments } from './utils/api';\nimport { PostList } from './components/PostList/PostList';\n\n\nconst App: FC = () => {\n  const [preparedPosts, setPreparedPosts] = useState<PreparedPost[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [query, setQuery] = useState('');\n\n  const handleClickLoad = () => {\n    setIsLoading(true);\n\n    Promise.all([getUsers(), getPosts(), getComments()])\n      .then(([usersFromApi, postsFromApi, commentsFromApi]) => {\n        setPreparedPosts(postsFromApi.map(post => ({\n          ...post,\n          user: usersFromApi.find(user => user.id === post.userId) as User,\n          comments: commentsFromApi.filter(comment => post.id === comment.postId) as Comments,\n        })));\n      })\n      .finally(() => setIsLoading(false));\n  };\n\n  const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n\n    setQuery(target.value);\n  };\n\n  const filteredPosts = useMemo<PreparedPost[]>(() => preparedPosts.filter(post => post.title\n    .trim()\n    .toLowerCase()\n    .includes(query.trim().toLowerCase())\n      || post.body\n        .trim()\n        .toLowerCase()\n        .includes(query.trim().toLowerCase())),\n  [query, preparedPosts]);\n\n  if (!preparedPosts.length) {\n    return (\n      <div className=\"App\">\n        <h1>Dynamic list of posts</h1>\n        <>\n          <button\n            type=\"button\"\n            className=\"button button-start\"\n            onClick={handleClickLoad}\n            disabled={isLoading}\n          >\n            Load\n          </button>\n        </>\n        {isLoading && (\n          <p className=\"text\">Loading...</p>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Dynamic list of posts</h1>\n      <div className=\"box\">\n        <div className=\"field\">\n          <label\n            htmlFor=\"search-query\"\n            className=\"label\"\n          >\n            Search:&nbsp;\n            <input\n              type=\"text\"\n              id=\"search-query\"\n              name=\"search-query\"\n              className=\"input\"\n              placeholder=\"Type search word\"\n              value={query}\n              onChange={event => onChangeHandler(event)}\n            />\n          </label>\n        </div>\n      </div>\n      <PostList posts={filteredPosts} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}